#pragma once
#include "SFML/Graphics.hpp"
class Player {
public:
	Player(int i_x, int i_y, int i_width, int i_height, float i_vel, float i_maxHp, int i_dmg);
    void givePath(std::shared_ptr<int[]> pathX, std::shared_ptr<int[]> pathY, int pathLenght);
    void deletePath();
    void move();
    void draw();
    void setTexture(int index);

    bool hasNewPath = false;
    std::shared_ptr<int[]> pathXpositions;
    std::shared_ptr<int[]> pathYpositions;
    int pathLenght;
    int cPathIndex;

    //status effects
    bool targetAble = true;
    bool inVladW = false;
private:

	int y;
	int x;
	float velocity;
    
    int width;
    int height;
    int cTextureI;
    sf::Texture* textures;

    void initTextures();
    //Getters and Setters (autogenerated)

    float hp;
    float maxHp;
    int dmg;


    bool findingPath;
    long long lastMoveTime;
   
public:
    //used in pathfinding threads => mutices are locked and unlocked----------
    void setFindingPath(bool i_findingPath);
    bool isFindingPath();

    //------------------------------------------------------------------------


    int pathsFound = 0;
    inline int getY() { return y; }
    inline void setY(int y) { this->y = y; }

    inline int getX() { return x; }
    inline void setX(int x) { this->x = x; }

    inline float getVelocity() { return velocity; }
    inline void setVelocity(float velocity) { this->velocity = velocity; }

    inline int getWidth() { return width; }
    inline void setwidth(int width) { this->width = width; }

    inline int getHeight() { return height; }
    inline void setheight(int height) { this->height = height; }

    inline float getHp() { return hp; }
    inline void setHp(float hp) { this->hp = hp; }

    inline float getMaxHp() { return maxHp; }
    inline void setMaxHp(float maxHp) { this->maxHp = maxHp; }

    inline int getDmg() { return dmg; }
    inline void setDmg(int dmg) { this->dmg = dmg; }

    inline bool hasPath() {
        if (pathLenght == -1) return false;
        return true;
    }


    inline int getPathgoalX() {
        return pathXpositions[pathLenght - 1];
    }

    inline int getPathgoalY() {
        return pathYpositions[pathLenght - 1];
    }

    inline int getTextureIndex() {
        return cTextureI;
    }
};
